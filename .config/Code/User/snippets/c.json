{
	// Place your snippets for c here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"ftmain": {
		"prefix": "ftmain",
		"description": "42 C code testing snippet",
		"body": [
			"//! Macro Definitions",
			"#define _STREAM_STDERR \"/dev/stderr\"",
			"#define _STREAM_STDOUT \"/dev/stdout\"",
			"#define _STREAM_STDIN \"/dev/stdin\"",
			"#define _STREAM_NULL \"/dev/null\"",
			"#define _u __attribute__((unused))",
			"#define __ARGC__ 1",
			"#if __ARGC__",
			"# define testargs(count) do {\t\t\t\t\t\t\t\t\t\t\t\t\t\\",
			"\tint iter = 0;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\",
			"\twhile (iter <= count) {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\",
			"\t\tif (argv[iter] == NULL) {\t\t\t\t\t\t\t\t\t\t\t\t\\",
			"\t\t\t(void) swrite(_STREAM_STDERR,\t\t\t\t\t\t\t\t\t\t\\",
			"\t\t\t\t\"argv[%d] must not be NULL! expected argc: %d\\n\", iter, count);\t\\",
			"\t\t\treturn (iter);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\",
			"\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\",
			"\t\titer++;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\",
			"\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\",
			"} while (0)",
			"#else //% __ARGC__ == 0",
			"# define testargs(count)",
			"#endif //% __ARGC__ == 1",
			"//! End of Macro Definitions",
			"",
			"//! Library Includes",
			"#include <stdio.h>",
			"#include <unistd.h>",
			"#include <stdlib.h>",
			"#include <string.h>",
			"#include <ctype.h>",
			"#include <stdarg.h>",
			"//! End of Library Includes",
			"",
			"//! Function Prototypes",
			"int\tswrite(const char *file_path, const char *fmt, ...)",
			"\t__attribute__((nonnull(1, 2)));",
			"//! End of Function Prototypes",
			"",
			"",
			"//TODO put your ft codes here...",
			"",
			"",
			"int\tmain(int argc _u, char *argv[] _u)",
			"{",
			"\t//> replace 0 with desired argument count. (must be a positive value)",
			"\ttestargs(0);",
			"",
			"\t//> test your codes here...",
			"",
			"\treturn (0);",
			"}",
			"",
			"",
			"//! Function Definitions",
			"int\tswrite(const char *file_path, const char *fmt, ...)",
			"{",
			"\tFILE *stream;",
			"\tstream = fopen(file_path, \"w\");",
			"\tif (stream == NULL)",
			"\t\treturn (-1);",
			"\tva_list arg_ptr;",
			"\tva_start(arg_ptr, fmt);",
			"\tint bytes_written = vfprintf(stream, fmt, arg_ptr);",
			"\tva_end(arg_ptr);",
			"\tfclose(stream);",
			"\treturn (bytes_written);",
			"}",
			"//! End of Function Definitions",
			"",
		],
	}
}